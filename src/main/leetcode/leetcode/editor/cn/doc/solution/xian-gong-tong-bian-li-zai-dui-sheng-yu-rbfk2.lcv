* java

```java
/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
        ListNode result=new ListNode();
        ListNode temp=result;//记录result
        int i=0;//定义变量i记录状态，判断该点两数之和是否大于10，大于10就记为1，小于10记为0
        while(l1!=null&&l2!=null){
        if(l1.val+l2.val+i<10){
            temp.val=l1.val+l2.val+i;
            i=0;
        }else{
            temp.val=(l1.val+l2.val+i)%10;
            i=1;
        }
        l1=l1.next;
        l2=l2.next;
        if(l1!=null||l2!=null){
        temp.next=new ListNode();
        temp=temp.next;
        }
        }
        //对剩余的l1结点继续记录
        while(l1!=null){
            if(l1.val+i<10){
            temp.val=l1.val+i;
            i=0;
            }else{
            temp.val=(i+l1.val)%10;
            }
        l1=l1.next;
        if(l1!=null){
        temp.next=new ListNode();
        temp=temp.next;
        }
        }
        //对剩余的l2结点继续记录
        while(l2!=null){
            if(l2.val+i<10){
            temp.val=l2.val+i;
            i=0;
            }else{
            temp.val=(i+l2.val)%10;
            }
        l2=l2.next;
        if(l2!=null){
        temp.next=new ListNode();
        temp=temp.next;
        }
        }
        //判断结束l1和l2的之后，判断此时的i是否为1，如果为1则需要进位，创建新的尾结点记录
        if(i==1){
            temp.next=new ListNode();
            temp.next.val=i;
        }
        return result;
    }
}
```

